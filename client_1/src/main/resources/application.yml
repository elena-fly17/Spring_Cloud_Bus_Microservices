# порт, на котором будет работать этот сервис - можно указать любой свободный порт
server:
  port: 8080

# id микросервиса - задаем какое хотим - желательно указывать всегда
spring:
  application:
    name: client_one
  # активный профиль - это значит, что настройки для сервисов хранятся в гит-репо
  profiles:
    active: git
  # адрес конфиг-сервера, с которого клиент будет брать настройки
  cloud:
    config:
      uri: http://localhost:8888
      # включаем получение конфигурации с конфиг-сервера
      enabled: true
      # будет использоваться Discovery Client для поиска конфиг-сервера
      discovery:
        enabled: true
        # указали id конфиг-сервера
        service-id: config-server
      # указывает, что приложение должно завершиться с ошибкой, если не удается получить
      # конфигурацию из Config Server.
      fail-fast: true
      retry:
        # количество попыток получения конфигов с Config Server - если после 20 попыток,
        # не получится, приложение продолжит работу с текущими конфигами или
        # будет использовать локальные настройки, если они есть
        max-attempts: 20
        # максимальный интервал времени (мс) между попытками получения конфигов -
        # при неудаче следующая попытка будет не раньше, чем через указанное время
        max-interval: 15000
        # начальный интервал времени (мс) перед первой попыткой получения конфигов -
        # после старта приложения первая попытка будет выполнена через указанное время
        initial-interval: 7000
    # включена функция автоматического обновления конфигурации с помощью Spring Cloud Bus -
    # каждый микросервис будет прослушивать шину сообщений (message bus) и
    # автоматически обновлять свои конфиги при изменении конфиг-файлов
    bus:
      refresh:
        enabled: true
      # включена функция автоматической передачи событий изменения окружения с помощью
      # Spring Cloud Bus - каждый микросервис будет прослушивать шину сообщений и
      # автоматически обновлять свое окружение, если происходят изменения в нем
      env:
        enabled: true
  config:
    import: "optional:configserver:"
  # указываем адрес для подключения к кафке
  kafka:
    bootstrap-servers: http://localhost:9092

# урл для регистрации микросервисов - указываем адрес эврика-сервера
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    # данный микросервис будет зарегистрирован в эврика-сервере
    enabled: true
    # указывает, что этот клиент должен зарегистрироваться в Eureka-сервере после запуска -
    # тогда его данные (имя, URL и др.) будут доступны др. микросервисам, использующим Eureka
    register-with-eureka: true
    # указывает, что клиент Eureka должен получать данные из реестра Eureka-сервера -
    # это позволяет клиенту знать, какие микросервисы доступны в системе и как получить
    # доступ к ним для маршрутизации запросов или установления связей с ними
    fetch-registry: true
